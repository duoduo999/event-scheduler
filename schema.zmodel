// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Booking {
    id           String   @id() @default(cuid())
    name         String
    description  String
    start        DateTime
    duration     Int
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    invitedUsers InvitedUser[]

    // allow everyone to create a booking, including anonymous users
    @@allow('create', true)

    // owner is allowed for full CRUD
    @@allow('all', auth() == user)

    // invited users can read the booking
    @@allow('read', invitedUsers?[user == auth()])
}

model InvitedUser {
    id          String @id() @default(cuid())
    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    booking     Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId   String

    // allow everyone to create an invitation, disallow create for self
    @@allow('create', auth() != null && user != auth())

    // booking's owner is allowed for full CRUD
    @@allow('all', booking.user == auth())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String
    scope             String
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique @omit
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bookings      Booking[]
    invitations   InvitedUser[]

    // everyone can signup, and user profile is also publicly readable
    @@allow('create,read', true)

    // only the user can update or delete their own profile
    @@allow('update,delete', auth() == this)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}
