//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="sqlite"
    url=env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

/// @@allow('create', true)
/// @@allow('all', auth() == user)
/// @@allow('read', invitedUsers ? [user == auth()])
model Booking {
    id String @id() @default(cuid())
    name String
    description String
    start DateTime
    duration Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    invitedUsers InvitedUser[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

/// @@allow('create', auth() != null && user != auth())
/// @@allow('all', booking.user == auth())
model InvitedUser {
    id String @id() @default(cuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId String
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String
    scope String
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model User {
    id String @id() @default(cuid())
    name String?
    /// @omit
    email String? @unique()
    emailVerified DateTime?
    image String?
    accounts Account[]
    sessions Session[]
    bookings Booking[]
    invitations InvitedUser[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime
    @@unique([identifier, token])
}